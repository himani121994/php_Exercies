// import React, { useEffect, useState } from 'react';
// import { get } from '../../../services/api-services';
// import {
//     Box,
//     Typography,
//     Button,
//     LinearProgress,
//     Card,
//     CardContent,
//     IconButton,
//     Tooltip,
//     Table,
//     TableBody,
//     TableCell,
//     TableContainer,
//     TableHead,
//     TableRow,
//     Paper
// } from '@mui/material';
// import EditIcon from '@mui/icons-material/Edit';
// import InfoIcon from '@mui/icons-material/Info';
// import { useParams } from 'react-router-dom';
// import EnrollProgramDialog from '../profileModel-DialogBox/AddEnrollProgramDialog';

// const Programs = ({ userId, tabIndex, programId }) => {
//     const [userPrograms, setUserPrograms] = useState([]);
//     const [paymentData, setPaymentData] = useState([]);
//     const [isDialogOpen, setIsDialogOpen] = useState(false);
//     const [loading, setLoading] = useState(true);
//     const { id } = useParams();
//     console.log("Received Program ID:", programId);

//     useEffect(() => {
//         const fetchPayments = async () => {
//             try {
//                 // First API call to fetch user programs
//                 const userProgramsResponse = await get(
//                     `/UserPrograms?filter={"where" : {"customerId" : "${id}"}, "include" : "invoice", "order" : "createdAt DESC"}`
//                 );
//                 setUserPrograms(userProgramsResponse.data);

//                 // Extract programId and invoiceId from the first response
//                 const programId = userProgramsResponse.data[0]?.invoice?.programId;
//                 const invoiceId = userProgramsResponse.data[0]?.invoice?.id;

//                 if (programId && invoiceId) {
//                     // Second API call to fetch payments using the extracted programId and invoiceId
//                     const paymentsResponse = await get(
//                         `/Payments?filter={"where": {"customerId": "${id}", "programId": "${programId}", "invoiceId": "${invoiceId}"}, "order": "paidOn"}`
//                     );
//                     console.log("Payments Data:", paymentsResponse.data);
//                     setPaymentData(paymentsResponse.data);
//                 } else {
//                     console.error("Program ID or Invoice ID is missing");
//                 }

//             } catch (error) {
//                 console.error("Error fetching payment data:", error);
//             } finally {
//                 setLoading(false);
//             }
//         };

//         fetchPayments();
//     }, [id]); // The useEffect will re-run when the `id` changes

//     console.log(userPrograms, "program data ")

//     const addUserProgramDialog = () => {
//         // Handle add user program dialog
//     };

//     const editUserProgramDialog = (userId, programId) => {
//         // Handle edit user program dialog
//     };

//     const invoiceUrl = (invoiceId) => {
//         // Handle viewing the invoice
//     };

//     if (loading) {
//         return <Typography>Loading...</Typography>;
//     }
//     const handleEnrolltoProgram = () => setIsDialogOpen(true);
//     const handleDialogClose = () => setIsDialogOpen(false);


//     return (
//         <Box sx={{ marginLeft: '20px', marginRight: '10px' }}>
//             <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ marginBottom: 2 }}>
//                 <Typography variant="h6" sx={{ fontWeight: 500 }}>
//                     Enrolled Programs
//                 </Typography>
//                 <Button
//                     variant="text"
//                     color="secondary"
//                     onClick={handleEnrolltoProgram}
//                 >
//                     Enroll new programs
//                 </Button>
//             </Box>

//             {userPrograms.length === 0 && (
//                 <Typography align="center">Enroll program for the user!</Typography>
//             )}

//             {userPrograms.map((enrollProgram) => (
//                 <Card
//                     key={enrollProgram.id}
//                     sx={{
//                         marginBottom: 2,
//                         backgroundColor: enrollProgram.status === 'active' ? '#fff' : '#f5f5f5',
//                         boxShadow: 1,
//                     }}
//                 >
//                     <CardContent>
//                         <Box display="flex" justifyContent="space-between" alignItems="center">
//                             <Typography variant="h6">
//                                 {enrollProgram.invoice?.purchaseProgram?.title} (₹
//                                 {enrollProgram.invoice?.purchaseProgram?.price})
//                             </Typography>
//                             <IconButton onClick={() => editUserProgramDialog(userId, enrollProgram.id)}>
//                                 <EditIcon color="action" />
//                             </IconButton>
//                         </Box>

//                         <Typography variant="body2" color="textSecondary">
//                             {enrollProgram.invoice?.purchaseProgram?.duration} Days
//                         </Typography>
//                         <Typography variant="body2" color="textSecondary">
//                             {new Date(enrollProgram.invoice?.enrollOn).toLocaleDateString()} To
//                             {new Date(enrollProgram.invoice?.completedOn).toLocaleDateString()}
//                         </Typography>

//                         <Typography
//                             variant="body2"
//                             color={enrollProgram.remainingDay === '0' ? 'primary' : 'textSecondary'}
//                         >
//                             {enrollProgram.remainingDay === '0' ? 'Completed' : 'In Progress'}
//                         </Typography>

//                         <LinearProgress
//                             variant="determinate"
//                             value={
//                                 enrollProgram.remainingDay === '0'
//                                     ? 100
//                                     : ((enrollProgram.invoice?.purchaseProgram?.duration -
//                                         enrollProgram.remainingDay) /
//                                         enrollProgram.invoice?.purchaseProgram?.duration) *
//                                     100
//                             }
//                             color="secondary"
//                         />

//                         <Typography variant="body2" color="primary">
//                             {enrollProgram.remainingDay}d Remaining
//                         </Typography>

//                         <Box display="flex" flexWrap="wrap">
//                             <Typography variant="body2">
//                                 Discount: ₹{enrollProgram.invoice?.feeDiscount || '0'}
//                                 <Tooltip title={enrollProgram.invoice?.discountNote || ''} arrow>
//                                     <InfoIcon color="action" />
//                                 </Tooltip>
//                             </Typography>

//                             <Typography variant="body2">
//                                 Net Fee: ₹{enrollProgram.programNetAmt}
//                             </Typography>

//                             <Typography
//                                 variant="body2"
//                                 color={enrollProgram.remainAmount <= 1 ? 'primary' : 'error'}
//                             >
//                                 Fee Status: {enrollProgram.remainAmount <= 1 ? '✔ Paid' : `(₹${enrollProgram.remainAmount}) Due`}
//                             </Typography>

//                             <Button onClick={() => invoiceUrl(enrollProgram.invoice?.id)}>VIEW INVOICE</Button>
//                         </Box>


//                         {paymentData.length > 0 && (
//                             <Box mt={4}>
//                                 <Typography variant="h6" sx={{ mb: 2 }}>
//                                     Payment History
//                                 </Typography>
//                                 <TableContainer component={Paper}>
//                                     <Table>
//                                         <TableHead>
//                                             <TableRow>
//                                                 <TableCell>Paid On</TableCell>
//                                                 <TableCell>Paid Amount</TableCell>
//                                                 <TableCell>Remaining Amount</TableCell>
//                                                 <TableCell>Payment Mode</TableCell>
//                                                 <TableCell>Comments</TableCell>
//                                                 <TableCell>Action</TableCell>
//                                             </TableRow>
//                                         </TableHead>
//                                         <TableBody>
//                                             {paymentData.map((payment) => (
//                                                 <TableRow key={payment.id}>
//                                                     <TableCell>{new Date(payment.paidOn).toLocaleDateString()}</TableCell>
//                                                     <TableCell>₹{payment.amount}</TableCell>
//                                                     <TableCell>₹{enrollProgram.dueAmount}</TableCell>
//                                                     <TableCell>{payment.paymentMode}</TableCell>
//                                                     <TableCell>{payment.comment || '-'}</TableCell>
//                                                     <TableCell>
//                                                         <IconButton
//                                                             onClick={() =>
//                                                                 editUserProgramDialog(payment.id, enrollProgram.remainAmount)
//                                                             }
//                                                             disabled={enrollProgram.remainAmount <= 1}
//                                                         >
//                                                             <EditIcon />
//                                                         </IconButton>
//                                                     </TableCell>
//                                                 </TableRow>
//                                             ))}
//                                         </TableBody>
//                                     </Table>
//                                 </TableContainer>
//                             </Box>
//                         )}


//                     </CardContent>
//                 </Card>
//             ))}
//             <EnrollProgramDialog
//                 open={isDialogOpen}
//                 onClose={handleDialogClose}
//             />
//         </Box>
//     );
// };

// export default Programs;

// import React, { useEffect, useState } from 'react';
// import { get } from '../../../services/api-services';
// import {
//     Box,
//     Typography,
//     Button,
//     LinearProgress,
//     Card,
//     CardContent,
//     IconButton,
//     Tooltip,
//     Table,
//     TableBody,
//     TableCell,
//     TableContainer,
//     TableHead,
//     TableRow,
//     Paper
// } from '@mui/material';
// import EditIcon from '@mui/icons-material/Edit';
// import InfoIcon from '@mui/icons-material/Info';
// import { useParams } from 'react-router-dom';
// import EnrollProgramDialog from '../profileModel-DialogBox/AddEnrollProgramDialog';

// const Programs = ({ userId, tabIndex, programId }) => {
//     const [userPrograms, setUserPrograms] = useState([]);
//     const [paymentData, setPaymentData] = useState([]);
//     const [isDialogOpen, setIsDialogOpen] = useState(false);
//     const [loading, setLoading] = useState(true);
//     const { id } = useParams();
//     console.log("Received Program ID:", programId);

//     useEffect(() => {
//         const fetchPayments = async () => {
//             try {
//                 // First API call to fetch user programs
//                 const userProgramsResponse = await get(
//                     `/UserPrograms?filter={"where" : {"customerId" : "${id}"}, "include" : "invoice", "order" : "createdAt DESC"}`
//                 );
//                 setUserPrograms(userProgramsResponse.data);
    
//                 // Loop through the userPrograms to make a second API call for payments for each program
//                 const allPayments = [];
//                 for (let enrollProgram of userProgramsResponse.data) {
//                     const programId = enrollProgram.invoice?.programId;
//                     const invoiceId = enrollProgram.invoice?.id;
    
//                     if (programId && invoiceId) {
//                         // Fetch payments for each programId and invoiceId
//                         const paymentsResponse = await get(
//                             `/Payments?filter={"where": {"customerId": "${id}", "programId": "${programId}", "invoiceId": "${invoiceId}"}, "order": "paidOn"}`
//                         );
//                         console.log("Payments Data for Program:", paymentsResponse.data);
//                         allPayments.push({ programId, payments: paymentsResponse.data });
//                     } else {
//                         console.error("Program ID or Invoice ID is missing for user program");
//                     }
//                 }
    
//                 // Set the fetched payment data
//                 setPaymentData(allPayments);
//             } catch (error) {
//                 console.error("Error fetching payment data:", error);
//             } finally {
//                 setLoading(false);
//             }
//         };
    
//         fetchPayments();
//     }, [id]);
    
    

//     const handleEnrolltoProgram = () => setIsDialogOpen(true);
//     const handleDialogClose = () => setIsDialogOpen(false);

//     const invoiceUrl = (invoiceId) => {
//         // Handle viewing the invoice
//     };

//     if (loading) {
//         return <Typography>Loading...</Typography>;
//     }

//     return (
//         <Box sx={{ marginLeft: '20px', marginRight: '10px' }}>
//             <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ marginBottom: 2 }}>
//                 <Typography variant="h6" sx={{ fontWeight: 500 }}>
//                     Enrolled Programs
//                 </Typography>
//                 <Button
//                     variant="text"
//                     color="secondary"
//                     onClick={handleEnrolltoProgram}
//                 >
//                     Enroll new programs
//                 </Button>
//             </Box>

//             {userPrograms.length === 0 && (
//                 <Typography align="center">Enroll program for the user!</Typography>
//             )}

//             {userPrograms.map((enrollProgram) => (
//                 <Card
//                     key={enrollProgram.id}
//                     sx={{
//                         marginBottom: 2,
//                         backgroundColor: enrollProgram.status === 'active' ? '#fff' : '#f5f5f5',
//                         boxShadow: 1,
//                     }}
//                 >
//                     <CardContent>
//                         <Box display="flex" justifyContent="space-between" alignItems="center">
//                             <Typography variant="h6">
//                                 {enrollProgram.invoice?.purchaseProgram?.title} (₹
//                                 {enrollProgram.invoice?.purchaseProgram?.price})
//                             </Typography>
//                             <IconButton onClick={() => editUserProgramDialog(userId, enrollProgram.id)}>
//                                 <EditIcon color="action" />
//                             </IconButton>
//                         </Box>

//                         <Typography variant="body2" color="textSecondary">
//                             {enrollProgram.invoice?.purchaseProgram?.duration} Days
//                         </Typography>
//                         <Typography variant="body2" color="textSecondary">
//                             {new Date(enrollProgram.invoice?.enrollOn).toLocaleDateString()} To
//                             {new Date(enrollProgram.invoice?.completedOn).toLocaleDateString()}
//                         </Typography>

//                         <Typography
//                             variant="body2"
//                             color={enrollProgram.remainingDay === 0 ? 'primary' : 'textSecondary'}
//                         >
//                             {enrollProgram.remainingDay === 0 ? 'Completed' : 'In Progress'}
//                         </Typography>

//                         <LinearProgress
//                             variant="determinate"
//                             value={enrollProgram.remainingDay === 0
//                                 ? 100
//                                 : ((enrollProgram.invoice?.purchaseProgram?.duration - enrollProgram.remainingDay) /
//                                     enrollProgram.invoice?.purchaseProgram?.duration) * 100}
//                             color="secondary"
//                         />

//                         <Typography variant="body2" color="primary">
//                             {enrollProgram.remainingDay}d Remaining
//                         </Typography>

//                         <Box display="flex" flexWrap="wrap">
//                             <Typography variant="body2">
//                                 Discount: ₹{enrollProgram.invoice?.feeDiscount || '0'}
//                                 <Tooltip title={enrollProgram.invoice?.discountNote || ''} arrow>
//                                     <InfoIcon color="action" />
//                                 </Tooltip>
//                             </Typography>

//                             <Typography variant="body2">
//                                 Net Fee: ₹{enrollProgram.programNetAmt}
//                             </Typography>

//                             <Typography
//                                 variant="body2"
//                                 color={enrollProgram.remainingAmount <= 1 ? 'primary' : 'error'}
//                             >
//                                 Fee Status: {enrollProgram.remainingAmount <= 1 ? '✔ Paid' : `(₹${enrollProgram.remainingAmount}) Due`}
//                             </Typography>

//                             <Button onClick={() => invoiceUrl(enrollProgram.invoice?.id)}>VIEW INVOICE</Button>
//                         </Box>

//                         {enrollProgram.payments && enrollProgram.payments.length > 0 && (
//                             <Box mt={4}>
//                                 <Typography variant="h6" sx={{ mb: 2 }}>
//                                     Payment History
//                                 </Typography>
//                                 <TableContainer component={Paper}>
//                                     <Table>
//                                         <TableHead>
//                                             <TableRow>
//                                                 <TableCell>Paid On</TableCell>
//                                                 <TableCell>Paid Amount</TableCell>
//                                                 <TableCell>Remaining Amount</TableCell>
//                                                 <TableCell>Payment Mode</TableCell>
//                                                 <TableCell>Comments</TableCell>
//                                                 <TableCell>Action</TableCell>
//                                             </TableRow>
//                                         </TableHead>
//                                         <TableBody>
//                                             {enrollProgram.payments.map((payment) => (
//                                                 <TableRow key={payment.id}>
//                                                     <TableCell>{new Date(payment.paidOn).toLocaleDateString()}</TableCell>
//                                                     <TableCell>₹{payment.amount}</TableCell>
//                                                     <TableCell>₹{enrollProgram.remainAmount}</TableCell>
//                                                     <TableCell>{payment.mode}</TableCell>
//                                                     <TableCell>{payment.comment || '-'}</TableCell>
//                                                     <TableCell>
//                                                         <IconButton
//                                                             onClick={() => editUserProgramDialog(payment.id, enrollProgram.remainAmount)}
//                                                             disabled={enrollProgram.remainAmount <= 1}
//                                                         >
//                                                             <EditIcon />
//                                                         </IconButton>
//                                                     </TableCell>
//                                                 </TableRow>
//                                             ))}
//                                         </TableBody>
//                                     </Table>
//                                 </TableContainer>
//                             </Box>
//                         )}
//                     </CardContent>
//                 </Card>
//             ))}

//             <EnrollProgramDialog
//                 open={isDialogOpen}
//                 onClose={handleDialogClose}
//             />
//         </Box>
//     );
// };

// export default Programs;


// import React, { useEffect, useState } from 'react';
// import { get } from '../../../services/api-services';
// import {
//     Box,
//     Typography,
//     Button,
//     LinearProgress,
//     Card,
//     CardContent,
//     IconButton,
//     Tooltip,
//     Table,
//     TableBody,
//     TableCell,
//     TableContainer,
//     TableHead,
//     TableRow,
//     Paper
// } from '@mui/material';
// import EditIcon from '@mui/icons-material/Edit';
// import InfoIcon from '@mui/icons-material/Info';
// import { useParams } from 'react-router-dom';
// import EnrollProgramDialog from '../profileModel-DialogBox/AddEnrollProgramDialog';

// const Programs = ({ userId, tabIndex, programId }) => {
//     const [userPrograms, setUserPrograms] = useState([]);
//     const [paymentData, setPaymentData] = useState([]);
//     const [isDialogOpen, setIsDialogOpen] = useState(false);
//     const [loading, setLoading] = useState(true);
//     const { id } = useParams();
//     console.log("Received Program ID:", programId);

//     useEffect(() => {
//         const fetchPayments = async () => {
//             try {
//                 const userProgramsResponse = await get(
//                     `/UserPrograms?filter={"where" : {"customerId" : "${id}"}, "include" : "invoice", "order" : "createdAt DESC"}`
//                 );
//                 setUserPrograms(userProgramsResponse.data);

//                 const allPayments = [];
//                 for (let enrollProgram of userProgramsResponse.data) {
//                     const programId = enrollProgram.invoice?.programId;
//                     const invoiceId = enrollProgram.invoice?.id;

//                     if (programId && invoiceId) {
//                         const paymentsResponse = await get(
//                             `/Payments?filter={"where": {"customerId": "${id}", "programId": "${programId}", "invoiceId": "${invoiceId}"}, "order": "paidOn"}`
//                         );
//                         console.log("Payments Data for Program:", paymentsResponse.data);
//                         allPayments.push({ programId, payments: paymentsResponse.data });
//                     } else {
//                         console.error("Program ID or Invoice ID is missing for user program");
//                     }
//                 }

//                 setPaymentData(allPayments);
//             } catch (error) {
//                 console.error("Error fetching payment data:", error);
//             } finally {
//                 setLoading(false);
//             }
//         };

//         fetchPayments();
//     }, [id]);

//     const handleEnrolltoProgram = () => setIsDialogOpen(true);
//     const handleDialogClose = () => setIsDialogOpen(false);

//     const invoiceUrl = (invoiceId) => {
//         // Handle viewing the invoice
//     };

//     if (loading) {
//         return <Typography>Loading...</Typography>;
//     }

//     return (
//         <Box sx={{ marginLeft: '20px', marginRight: '10px' }}>
//             <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ marginBottom: 2 }}>
//                 <Typography variant="h6" sx={{ fontWeight: 500 }}>
//                     Enrolled Programs
//                 </Typography>
//                 <Button
//                     variant="text"
//                     color="secondary"
//                     onClick={handleEnrolltoProgram}
//                 >
//                     Enroll new programs
//                 </Button>
//             </Box>

//             {userPrograms.length === 0 && (
//                 <Typography align="center">Enroll program for the user!</Typography>
//             )}

//             {userPrograms.map((enrollProgram) => (
//                 <Card
//                     key={enrollProgram.id}
//                     sx={{
//                         marginBottom: 2,
//                         backgroundColor: enrollProgram.status === 'active' ? '#fff' : '#f5f5f5',
//                         boxShadow: 1,
//                     }}
//                 >
//                     <CardContent>
//                         <Box display="flex" justifyContent="space-between" alignItems="center">
//                             <Typography variant="h6">
//                                 {enrollProgram.invoice?.purchaseProgram?.title} (₹
//                                 {enrollProgram.invoice?.purchaseProgram?.price})
//                             </Typography>
//                             <IconButton onClick={() => editUserProgramDialog(userId, enrollProgram.id)}>
//                                 <EditIcon color="action" />
//                             </IconButton>
//                         </Box>

//                         <Typography variant="body2" color="textSecondary">
//                             {enrollProgram.invoice?.purchaseProgram?.duration} Days
//                         </Typography>
//                         <Typography variant="body2" color="textSecondary">
//                             {new Date(enrollProgram.invoice?.enrollOn).toLocaleDateString()} To
//                             {new Date(enrollProgram.invoice?.completedOn).toLocaleDateString()}
//                         </Typography>

//                         <Typography
//                             variant="body2"
//                             color={enrollProgram.remainingDay === 0 ? 'primary' : 'textSecondary'}
//                         >
//                             {enrollProgram.remainingDay === 0 ? 'Completed' : 'In Progress'}
//                         </Typography>

//                         <LinearProgress
//                             variant="determinate"
//                             value={enrollProgram.remainingDay === 0
//                                 ? 100
//                                 : ((enrollProgram.invoice?.purchaseProgram?.duration - enrollProgram.remainingDay) /
//                                     enrollProgram.invoice?.purchaseProgram?.duration) * 100}
//                             color="secondary"
//                         />

//                         <Typography variant="body2" color="primary">
//                             {enrollProgram.remainingDay}d Remaining
//                         </Typography>

//                         <Box display="flex" flexWrap="wrap">
//                             <Typography variant="body2">
//                                 Discount: ₹{enrollProgram.invoice?.feeDiscount || '0'}
//                                 <Tooltip title={enrollProgram.invoice?.discountNote || ''} arrow>
//                                     <InfoIcon color="action" />
//                                 </Tooltip>
//                             </Typography>

//                             <Typography variant="body2">
//                                 Net Fee: ₹{enrollProgram.programNetAmt}
//                             </Typography>

//                             <Typography
//                                 variant="body2"
//                                 color={enrollProgram.remainingAmount <= 1 ? 'primary' : 'error'}
//                             >
//                                 Fee Status: {enrollProgram.remainingAmount <= 1 ? '✔ Paid' : `(₹${enrollProgram.remainingAmount}) Due`}
//                             </Typography>

//                             <Button onClick={() => invoiceUrl(enrollProgram.invoice?.id)}>VIEW INVOICE</Button>
//                         </Box>

//                         {/* Ensure payments are correctly linked to the enrollProgram */}
//                         {paymentData
//                             .filter((payment) => payment.programId === enrollProgram.invoice?.programId)
//                             .map((paymentGroup) => (
//                                 <Box mt={4} key={paymentGroup.programId}>
//                                     <Typography variant="h6" sx={{ mb: 2 }}>
//                                         Payment History
//                                     </Typography>
//                                     <TableContainer component={Paper}>
//                                         <Table>
//                                             <TableHead>
//                                                 <TableRow>
//                                                     <TableCell>Paid On</TableCell>
//                                                     <TableCell>Paid Amount</TableCell>
//                                                     <TableCell>Remaining Amount</TableCell>
//                                                     <TableCell>Payment Mode</TableCell>
//                                                     <TableCell>Comments</TableCell>
//                                                     <TableCell>Action</TableCell>
//                                                 </TableRow>
//                                             </TableHead>
//                                             <TableBody>
//                                                 {paymentGroup.payments
//                                                     .filter(
//                                                         (value, index, self) =>
//                                                             index === self.findIndex((t) => t.id === value.id)
//                                                     )
//                                                     .map((payment) => (
//                                                         <TableRow key={payment.id}>
//                                                             <TableCell>{new Date(payment.paidOn).toLocaleDateString()}</TableCell>
//                                                             <TableCell>₹{payment.amount}</TableCell>
//                                                             <TableCell>₹{enrollProgram.remainAmount}</TableCell>
//                                                             <TableCell>{payment.paymentMode}</TableCell>
//                                                             <TableCell>{payment.comment || '-'}</TableCell>
//                                                             <TableCell>
//                                                                 <IconButton
//                                                                     onClick={() => editUserProgramDialog(payment.id, enrollProgram.remainAmount)}
//                                                                     disabled={enrollProgram.remainAmount <= 1}
//                                                                 >
//                                                                     <EditIcon />
//                                                                 </IconButton>
//                                                             </TableCell>
//                                                         </TableRow>
//                                                     ))}
//                                             </TableBody>
//                                         </Table>
//                                     </TableContainer>
//                                 </Box>
//                             ))}

//                     </CardContent>
//                 </Card>
//             ))}

//             <EnrollProgramDialog
//                 open={isDialogOpen}
//                 onClose={handleDialogClose}
//             />
//         </Box>
//     );
// };

// export default Programs;

import React, { useEffect, useState } from 'react';
import { get } from '../../../services/api-services';
import {
    Box,
    Typography,
    Button,
    LinearProgress,
    Card,
    CardContent,
    IconButton,
    Tooltip,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Paper
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import InfoIcon from '@mui/icons-material/Info';
import { useParams } from 'react-router-dom';
import EnrollProgramDialog from '../profileModel-DialogBox/AddEnrollProgramDialog';

const Programs = ({ userId, tabIndex, programId }) => {
    const [userPrograms, setUserPrograms] = useState([]);
    const [paymentData, setPaymentData] = useState({});
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [loading, setLoading] = useState(true);
    const { id } = useParams();
    console.log("Received Program ID:", programId);

    useEffect(() => {
        const fetchPayments = async () => {
            try {
                const userProgramsResponse = await get(
                    `/UserPrograms?filter={"where" : {"customerId" : "${id}"}, "include" : "invoice", "order" : "createdAt DESC"}`
                );
                setUserPrograms(userProgramsResponse.data);
        
                const allPayments = {}; // Object to store payments by programId and invoiceId
        
                for (let enrollProgram of userProgramsResponse.data) {
                    const programId = enrollProgram.invoice?.programId;
                    const invoiceId = enrollProgram.invoice?.id;
        
                    if (programId && invoiceId) {
                        const paymentsResponse = await get(
                            `/Payments?filter={"where": {"customerId": "${id}", "programId": "${programId}", "invoiceId": "${invoiceId}"}, "order": "paidOn"}`
                        );
        
                        if (!allPayments[programId]) {
                            allPayments[programId] = {};  // Create a sub-object for each programId
                        }
        
                        // Store payments by both programId and invoiceId
                        allPayments[programId][invoiceId] = paymentsResponse.data;
                    } else {
                        console.error("Program ID or Invoice ID is missing for user program");
                    }
                }
        
                setPaymentData(allPayments); // Store payments by programId and invoiceId
            } catch (error) {
                console.error("Error fetching payment data:", error);
            } finally {
                setLoading(false);
            }
        };
        
    
        fetchPayments();
    }, [id]);
    

    const handleEnrolltoProgram = () => setIsDialogOpen(true);
    const handleDialogClose = () => setIsDialogOpen(false);

    const invoiceUrl = (invoiceId) => {
        // Handle viewing the invoice
    };

    if (loading) {
        return <Typography>Loading...</Typography>;
    }

    return (
        <Box sx={{ marginLeft: '20px', marginRight: '10px' }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ marginBottom: 2 }}>
                <Typography variant="h6" sx={{ fontWeight: 500 }}>
                    Enrolled Programs
                </Typography>
                <Button
                    variant="text"
                    color="secondary"
                    onClick={handleEnrolltoProgram}
                >
                    Enroll new programs
                </Button>
            </Box>

            {userPrograms.length === 0 && (
                <Typography align="center">Enroll program for the user!</Typography>
            )}

            {userPrograms.map((enrollProgram) => (
                <Card
                    key={enrollProgram.id}
                    sx={{
                        marginBottom: 2,
                        backgroundColor: enrollProgram.status === 'active' ? '#fff' : '#f5f5f5',
                        boxShadow: 1,
                    }}
                >
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center">
                            <Typography variant="h6">
                                {enrollProgram.invoice?.purchaseProgram?.title} (₹
                                {enrollProgram.invoice?.purchaseProgram?.price})
                            </Typography>
                            <IconButton onClick={() => editUserProgramDialog(userId, enrollProgram.id)}>
                                <EditIcon color="action" />
                            </IconButton>
                        </Box>

                        <Typography variant="body2" color="textSecondary">
                            {enrollProgram.invoice?.purchaseProgram?.duration} Days
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                            {new Date(enrollProgram.invoice?.enrollOn).toLocaleDateString()} To
                            {new Date(enrollProgram.invoice?.completedOn).toLocaleDateString()}
                        </Typography>

                        <Typography
                            variant="body2"
                            color={enrollProgram.remainingDay === 0 ? 'primary' : 'textSecondary'}
                        >
                            {enrollProgram.remainingDay === 0 ? 'Completed' : 'In Progress'}
                        </Typography>

                        <LinearProgress
                            variant="determinate"
                            value={enrollProgram.remainingDay === 0
                                ? 100
                                : ((enrollProgram.invoice?.purchaseProgram?.duration - enrollProgram.remainingDay) /
                                    enrollProgram.invoice?.purchaseProgram?.duration) * 100}
                            color="secondary"
                        />

                        <Typography variant="body2" color="primary">
                            {enrollProgram.remainingDay}d Remaining
                        </Typography>

                        <Box display="flex" flexWrap="wrap">
                            <Typography variant="body2">
                                Discount: ₹{enrollProgram.invoice?.feeDiscount || '0'}
                                <Tooltip title={enrollProgram.invoice?.discountNote || ''} arrow>
                                    <InfoIcon color="action" />
                                </Tooltip>
                            </Typography>

                            <Typography variant="body2">
                                Net Fee: ₹{enrollProgram.programNetAmt}
                            </Typography>

                            <Typography
                                variant="body2"
                                color={enrollProgram.remainingAmount <= 1 ? 'primary' : 'error'}
                            >
                                Fee Status: {enrollProgram.remainingAmount <= 1 ? '✔ Paid' : `(₹${enrollProgram.remainingAmount}) Due`}
                            </Typography>

                            <Button onClick={() => invoiceUrl(enrollProgram.invoice?.id)}>VIEW INVOICE</Button>
                        </Box>

                        {/* Ensure payments are correctly linked to the enrollProgram */}
                        {paymentData[enrollProgram.invoice?.programId] && (
    <Box mt={4}>
        <Typography variant="h6" sx={{ mb: 2 }}>
            Payment History
        </Typography>
        <TableContainer component={Paper}>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>Paid On</TableCell>
                        <TableCell>Paid Amount</TableCell>
                        <TableCell>Remaining Amount</TableCell>
                        <TableCell>Payment Mode</TableCell>
                        <TableCell>Comments</TableCell>
                        <TableCell>Action</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {Object.values(paymentData[enrollProgram.invoice?.programId])
                        .flat()
                        .map((payment) => (
                            <TableRow key={payment.id}>
                                <TableCell>{new Date(payment.paidOn).toLocaleDateString()}</TableCell>
                                <TableCell>₹{payment.amount}</TableCell>
                                <TableCell>₹{enrollProgram.remainAmount}</TableCell>
                                <TableCell>{payment.paymentMode}</TableCell>
                                <TableCell>{payment.comment || '-'}</TableCell>
                                <TableCell>
                                    <IconButton
                                        onClick={() => editUserProgramDialog(payment.id, enrollProgram.remainAmount)}
                                        disabled={enrollProgram.remainAmount <= 1}
                                    >
                                        <EditIcon />
                                    </IconButton>
                                </TableCell>
                            </TableRow>
                        ))}
                </TableBody>
            </Table>
        </TableContainer>
    </Box>
)}

                    </CardContent>
                </Card>
            ))}

            <EnrollProgramDialog
                open={isDialogOpen}
                onClose={handleDialogClose}
            />
        </Box>
    );
};

export default Programs;

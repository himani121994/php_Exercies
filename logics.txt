javascript : 
{
    == : "type conversion user for comparision";
    === : "not use type conversion for comparision";

practice : - 
    var obj1 = {
   x:  43,
   y:  "Hello world!",
   z: function(){
      return this.x;
   }
   === bigint =====
   var bigInteger =  234567890123456789012345678901234567890;

   hoistedFunction();  // Outputs " Hello world! " even when the function is declared after calling

function hoistedFunction(){ 
  console.log(" Hello world! ");
} 
}
      
// Collection of data as an ordered list
     
var array1 = [5, "Hello", true, 4.1]; 
}

c++ : 
{
   >> : "this is the right shift oparater /"
   << : "right shif oparater *"
   And : its reprasent &&;
   & : its represent comparision;
   or : its represent ||;
   recursion : when a funtion calling itself;
   type ::
    direct recursion : when function is called itself directly.
    type of direct recursion:- tail recursion ,head recursion, tree recursion and nested recursion;
        1 tail recursion : when the function called itself and in the procces it will not return anything and offter complete 
        give the all result like :- 3 2 1;  desending order
        2 head recursion : when the function called itself and in the procces it will not return anything and offter complete 
        give the all result like :- 1 2 3 ; assending order
        3 tree recursion : 
    indirect recursion : when a function calls in other function that evencually calles the original function.
}

MongoDB{
    Aggregation operations allow you to group, sort, perform calculations, analyze data, and much more
   
   db.posts.aggregate([
  // Stage 1: Only find documents that have more than 1 like
  {
    $match: { likes: { $gt: 1 } }
  },
  // Stage 2: Group documents by category and sum each categories likes
  {
    $group: { _id: "$category", totalLikes: { $sum: "$likes" } }
  }
])

 the data types in MongoDB.
MongoDB supports a wide range of data types as values in documents. Documents in MongoDB are similar to objects in JavaScript. Along with JSON’s essential key/value–pair nature, MongoDB adds support for a number of additional data types. The common data types in MongoDB are:
Null
{"x" : null}
Boolean
{"x" : true}
Number
{"x" : 4}
String
{"x" : "foobar"}
Date
{"x" : new Date()}
Regular expression
{"x" : /foobar/i}
Array
{"x" : ["a", "b", "c"]}
Embedded document
{"x" : {"foo" : "bar"}}
Object ID
{"x" : ObjectId()}
Binary Data
Binary data is a string of arbitrary bytes.
Code
{"x" : function() { /* ... */ }}

==========================================================================================
Aggregation $group :
This aggregation stage groups documents by the unique _id expression provided.
Don't confuse this _id expression with the _id ObjectId provided to each document.
}

sql {
  The SELECT DISTINCT statement is used to return only distinct (different) values.

  The WHERE clause is used to filter records.

It is used to extract only those records that fulfill a specified condition.
}

{

}
